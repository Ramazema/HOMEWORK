# задача 1
#  Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
#  Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для
#  конкретных значений необходимо запускать скрипт с параметрами.

def simple_calc():
    x = float(input('Введите количество отработанных часов : '))
    y = float(input('Введите суммы оплаты труда за 1 час : '))
    c = float(input('Укажите размер премии - '))
    pay = x * y
    return pay + c
print(f'Размер заработной платы составил: {simple_calc() }')

# задача 2
#  Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# https://pythonist.ru/kak-rabotaet-funkcziya-enumerate-v-python/?ysclid=l7ypt43lkd519796772
# Функция zip объединяет в кортежи элементы из последовательностей переданных в качестве аргументов

in_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
res_list = [number for i, number in enumerate(in_list) if i > 0 and in_list[i] > in_list[i - 1]]
res = [num1 for num1, num2 in zip(in_list[1:], in_list[:-1]) if num1 > num2]
print(res)
print(res_list)

# задача 3
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

new = [i for i in range(20, 240) if not i % 20 or not i % 21]
print(new)

# задача 4
# Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
# соответствующих требованию. Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
# Метод count() возвращает количество раз, когда указанный элемент появляется в списке

in_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [i for i in in_list if in_list.count(i) == 1]
print(new_list)

# задача 5
# Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# https://docs-python.ru/standart-library/modul-functools-python/funktsija-reduce-modulja-functools/

from functools import reduce
list = [i for i in range(100, 1001, 2)]
print("Список чётных чисел от 100 до 1000]:\n", list)
print("Произведение всех элементов списка:\n", reduce(lambda x, y: x * y, list))

# задача 6
#  Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.

from itertools import count
n = int(input("Введите целое число с 3 до 10: "))
for i in count(n):
    if i > 10:
        print('число больше 10')
        break
    print(i, end=' ')

from itertools import cycle
i = 0
for order in cycle([1, 2, 3]):
    if i > 11:
        break
    print(order, end=' ')
    i += 1

# задача 7
# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.

from math import factorial
def fact(n):
    for i in range(n):
        print(i, end='! = ')
        yield factorial(i)
for el in fact(9):
    print(el)




